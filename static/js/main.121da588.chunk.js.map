{"version":3,"sources":["components/SearchBar.js","components/Location.js","components/CurrentDate.js","components/Temperature.js","components/WeatherType.js","components/Error.js","components/Message.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","query","setQuery","className","type","placeholder","onChange","e","target","value","onKeyUp","evt","key","url","URL","api","search","URLSearchParams","q","units","APPID","fetch","then","res","json","result","setWeather","console","log","Location","weather","name","sys","country","CurrentDate","Date","toLocaleString","dateStyle","Temperature","temp","WeatherType","main","src","icon","alt","Error","cod","message","Message","App","useEffect","loadLocalWeather","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","lon","longitude","toLowerCase","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.121da588.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport default function SearchBar(props) {\n  const [query, setQuery] = useState('');\n  const search = (evt) => {\n    if (evt.key === 'Enter') {\n      let url = new URL(props.api.url);\n      url.search = new URLSearchParams({\n        q: query,\n        units: 'metric',\n        APPID: props.api.key,\n      });\n\n      // fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      fetch(url)\n        .then((res) => res.json())\n        .then((result) => {\n          props.setWeather(result);\n          setQuery('');\n          console.log(result); //delete\n        });\n    }\n  };\n  return (\n    <div className=\"search-box\">\n      <input\n        type=\"text\"\n        className=\"search-bar\"\n        placeholder=\"Search...\"\n        onChange={(e) => setQuery(e.target.value)}\n        value={query}\n        onKeyUp={search}\n      />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function Location(props) {\n  return (\n    <div>\n      <div className=\"location-box\">\n        {props.weather.name ? (\n          <div className=\"location\">\n            {props.weather.name}, {props.weather.sys.country}\n          </div>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function CurrentDate() {\n  const getDate = () => {\n    let date = new Date();\n    return date.toLocaleString('en-GB', {\n      dateStyle: 'full',\n    });\n  };\n\n  return <div className=\"date\">{getDate()}</div>;\n}\n","import React from 'react';\n\nexport default function Temperature(props) {\n  return (\n    <div>\n      <div className=\"temp\">{props.temp}Â°C</div>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function WeatherType(props) {\n  return (\n    <div>\n      <div className=\"weather\">\n        {props.type.main}\n        <img\n          src={`http://openweathermap.org/img/wn/${props.type.icon}@2x.png`}\n          alt=\"Weather icon\"\n        ></img>\n      </div>\n    </div>\n  );\n}\n","import React, { Fragment } from 'react';\n\nexport default function Error(props) {\n  return (\n    <Fragment>\n      {props.weather.cod === '404' ? (\n        <div className=\"error-box\">\n          <div className=\"error\">{props.weather.message}</div>\n        </div>\n      ) : (\n        ''\n      )}\n    </Fragment>\n  );\n}\n","import React from 'react';\n\nexport default function Message(props) {\n  return <div className=\"message\">{props.message}</div>;\n}\n","import React, { useState, useEffect } from 'react';\nimport SearchBar from './components/SearchBar';\nimport Location from './components/Location';\nimport CurrentDate from './components/CurrentDate';\nimport Temperature from './components/Temperature';\nimport WeatherType from './components/WeatherType';\nimport Error from './components/Error';\nimport Message from './components/Message';\n\nconst api = {\n  key: '79313e325d1f563d35fc3c61b805604a',\n  url: 'https://api.openweathermap.org/data/2.5/weather',\n};\n\nfunction App() {\n  const [weather, setWeather] = useState({});\n\n  // Get initial user coordinates\n  useEffect(() => {\n    loadLocalWeather();\n  }, []);\n\n  const loadLocalWeather = () => {\n    navigator.geolocation.getCurrentPosition((pos) => {\n      let url = new URL(api.url);\n      url.search = new URLSearchParams({\n        lat: pos.coords.latitude,\n        lon: pos.coords.longitude,\n        units: 'metric',\n        APPID: api.key,\n      });\n\n      fetch(url)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n        });\n    });\n  };\n\n  return (\n    <div\n      className={\n        weather.main ? `app ${weather.weather[0].main.toLowerCase()}` : 'app'\n      }\n    >\n      <main>\n        <SearchBar api={api} setWeather={setWeather} />\n        <Location weather={weather} />\n        <CurrentDate />\n\n        {weather.main ? (\n          <div className=\"weather-box\">\n            <Temperature temp={Math.round(weather.main.temp)} />\n            <WeatherType type={weather.weather[0]} />\n          </div>\n        ) : !weather.cod ? (\n          <Message message=\"Please enable location tracking or use the search bar above\" />\n        ) : (\n          ''\n        )}\n\n        <Error weather={weather} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}