{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","useEffect","navigator","geolocation","getCurrentPosition","loadLocalWeather","pos","url","URL","search","URLSearchParams","lat","coords","latitude","lon","longitude","units","APPID","fetch","then","res","json","result","className","main","toLowerCase","type","placeholder","onChange","e","target","value","onKeyUp","evt","key","q","console","log","name","sys","country","Date","toLocaleString","dateStyle","Math","round","temp","cod","message","toUpperCase","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"8KACMA,EACC,mCADDA,EAEE,kDAyGOC,MAtGf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAMbC,qBAAU,WACRC,UAAUC,YAAYC,mBAAmBC,KACxC,IAEH,IAAMA,EAAmB,SAACC,GACxB,IAAIC,EAAM,IAAIC,IAAId,GAClBa,EAAIE,OAAS,IAAIC,gBAAgB,CAC/BC,IAAKL,EAAIM,OAAOC,SAChBC,IAAKR,EAAIM,OAAOG,UAChBC,MAAO,SACPC,MAAOvB,IAGTwB,MAAMX,GACHY,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLtB,EAAWsB,OA+BjB,OACE,yBACEC,UACExB,EAAQyB,KAAR,cAAsBzB,EAAQA,QAAQ,GAAGyB,KAAKC,eAAkB,OAGlE,8BACE,yBAAKF,UAAU,cACb,2BACEG,KAAK,OACLH,UAAU,aACVI,YAAY,YACZC,SAAU,SAACC,GAAD,OAAO/B,EAAS+B,EAAEC,OAAOC,QACnCA,MAAOlC,EACPmC,QAzCK,SAACC,GACd,GAAgB,UAAZA,EAAIC,IAAiB,CACvB,IAAI3B,EAAM,IAAIC,IAAId,GAClBa,EAAIE,OAAS,IAAIC,gBAAgB,CAC/ByB,EAAGtC,EACHmB,MAAO,SACPC,MAAOvB,IAITwB,MAAMX,GACHY,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GACLtB,EAAWsB,GACXxB,EAAS,IACTsC,QAAQC,IAAIf,WA6Bd,6BACE,yBAAKC,UAAU,gBACZxB,EAAQuC,KACP,yBAAKf,UAAU,YACZxB,EAAQuC,KADX,KACmBvC,EAAQwC,IAAIC,SAG/B,GAEF,yBAAKjB,UAAU,SAhCZ,IAAIkB,MACHC,eAAe,QAAS,CAClCC,UAAW,WAgCN5C,EAAQyB,KACP,yBAAKD,UAAU,eACb,yBAAKA,UAAU,QAAQqB,KAAKC,MAAM9C,EAAQyB,KAAKsB,MAA/C,SACA,yBAAKvB,UAAU,WAAWxB,EAAQA,QAAQ,GAAGyB,OAG/C,IAGa,QAAhBzB,EAAQgD,IACP,yBAAKxB,UAAU,aACb,yBAAKA,UAAU,SAASxB,EAAQiD,QAAQC,gBAG1C,MCzFUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBzD,WACrBA,UAAU0D,cAAcC,MACrB1C,MAAK,SAAA2C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMjB,a","file":"static/js/main.c147fcf7.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nconst api = {\n  key: '79313e325d1f563d35fc3c61b805604a',\n  base: 'https://api.openweathermap.org/data/2.5/weather',\n};\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n  // const [coords, setCoords] = useState({});\n\n  // Get initial user coordinates\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(loadLocalWeather);\n  }, []);\n\n  const loadLocalWeather = (pos) => {\n    let url = new URL(api.base);\n    url.search = new URLSearchParams({\n      lat: pos.coords.latitude,\n      lon: pos.coords.longitude,\n      units: 'metric',\n      APPID: api.key,\n    });\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((result) => {\n        setWeather(result);\n      });\n  };\n\n  const search = (evt) => {\n    if (evt.key === 'Enter') {\n      let url = new URL(api.base);\n      url.search = new URLSearchParams({\n        q: query,\n        units: 'metric',\n        APPID: api.key,\n      });\n\n      // fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      fetch(url)\n        .then((res) => res.json())\n        .then((result) => {\n          setWeather(result);\n          setQuery('');\n          console.log(result); //delete\n        });\n    }\n  };\n\n  const getDate = () => {\n    let date = new Date();\n    return date.toLocaleString('en-GB', {\n      dateStyle: 'full',\n    });\n  };\n\n  return (\n    <div\n      className={\n        weather.main ? `app ${weather.weather[0].main.toLowerCase()}` : 'app'\n      }\n    >\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Search...\"\n            onChange={(e) => setQuery(e.target.value)}\n            value={query}\n            onKeyUp={search}\n          />\n        </div>\n        <div>\n          <div className=\"location-box\">\n            {weather.name ? (\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n            ) : (\n              ''\n            )}\n            <div className=\"date\">{getDate()}</div>\n          </div>\n          {weather.main ? (\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°C</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          ) : (\n            ''\n          )}\n        </div>\n        {weather.cod === '404' ? (\n          <div className=\"error-box\">\n            <div className=\"error\">{weather.message.toUpperCase()}</div>\n          </div>\n        ) : (\n          ''\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}